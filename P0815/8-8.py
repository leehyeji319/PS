# 다이나믹 프로그래밍 : 효율적인 화폐 구성
# N가지 종류의 화폐가 있습니다. 이 화폐들의 개수를 최소한으로 이용해서 
# 그 가치의 합이 M원이 되도록 하려고 합니다. 
# 이때 각 종류의 화폐는 몇 개라도 사용할 수 있습니다

# 정수 N,M 입력받기
n, m = map(int, input().split())
# N개의 화폐 단위 정보를 입력받기
array = []
for i in range(n):
    array.append(int(input()))

# 한 번 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [10001] * (m + 1)

# 다이나믹 프로그래밍 진행 (보텀업)
d[0] = 0 #아무것도 사용안해도 만들수잇는 금액이라고 가정하고..
for i in range(n): # i는 각각의 화폐 단위
    for j in range(array[i], m + 1): # j는 각각의 금액을 의미한다.
        if d[j - array[i]] != 10001: # (i - k)원을 만드는 방법이 존재하는 경우
            d[j] = min(d[j], d[j - array[i]] + 1) # 더 작은 값으로 갱신

# 계산된 결과 출력
if d[m] == 10001: # 최종적으로 M원을 만드는 방법이 없는 경우
    print(-1)
else:
    print(d[m])